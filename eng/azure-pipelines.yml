trigger:
  batch: true
  branches:
    include:
    - dotnet/main
    - dotnet/release/*

pr: none

variables:
- template: /eng/common-variables.yml@self
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: CheckNuGetSizesScript
  value: >-
    $nupkgs_large=(Get-ChildItem artifacts/packages/$(_BuildConfig)/Shipping -recurse -include "*.nupkg" | Select-Object Name,Length | Where-Object { $_.Length -gt 250*1MB });
    if ($nupkgs_large.Length -gt 0) { Write-Error "NuGet size exceeds 250MiB: $($nupkgs_large | Format-Table | Out-String)"; exit 1 }

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      git:
        submodules: false # TODO: we should reenable this
      tsa:
        enabled: true
      policheck:
        enabled: true
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
    containers:
      mariner20crossamd64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enablePublishBuildArtifacts: true
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: true
          enableMicrobuild: true
          jobs:

          ############ LINUX x64 BUILD ############
          - job: Build_Linux_x64
            displayName: Linux_x64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-ubuntu-2204
              os: linux
            container: mariner20crossamd64
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=x64 /p:PackageRID=linux-x64 /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=x64 /p:PackageRID=linux-x64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX arm64 BUILD ############
          - job: Build_Linux_arm64
            displayName: Linux_arm64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-ubuntu-2204
              os: linux
            container: mariner20crossamd64
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=arm64 /p:PackageRID=linux-arm64 /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=arm64 /p:PackageRID=linux-arm64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX MUSL x64 BUILD ############
          - job: Build_Linux_musl_x64
            displayName: Linux_musl_x64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-ubuntu-2204
              os: linux
            container: mariner20crossamd64
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=x64 /p:PackageRID=linux-musl-x64 /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=x64 /p:PackageRID=linux-musl-x64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX MUSL arm64 BUILD ############
          - job: Build_Linux_musl_arm64
            displayName: Linux_musl_arm64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-ubuntu-2204
              os: linux
            container: mariner20crossamd64
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=arm64 /p:PackageRID=linux-musl-arm64 /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=arm64 /p:PackageRID=linux-musl-arm64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS x64 BUILD ############
          - job: Build_macOS_x64
            displayName: macOS_x64
            timeoutInMinutes: 480
            pool:
              name: Azure Pipelines
              image: macos-12
              os: macOS
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash:
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=x64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS arm64 BUILD ############
          - job: Build_macOS_arm64
            displayName: macOS_arm64
            timeoutInMinutes: 480
            pool:
              name: Azure Pipelines
              image: macos-12
              os: macOS
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
              displayName: 'Build and package'

            - bash:
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=arm64 --projects $(Build.SourcesDirectory)/wasi-sdk.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ WINDOWS x64 BUILD ############
          - job: Build_Windows_x64
            displayName: Windows_x64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-windows-2022
              os: windows
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - powershell: |
                C:\msys64\usr\bin\bash -lc ' '
                C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
                C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -S msys/make msys/ninja msys/cmake msys/diffutils'
              displayName: Install MSYS2 packages (GNU Make and related)

            - script: |
                .\build.cmd -arch x64 -restore -build -pack -ci -configuration $(_BuildConfig) -sign -publish /p:SkipWorkloads=true /p:PackageRID=win-x64 /p:AssetManifestOS=win /p:PlatformName=x64 /p:MsysDir=c:\msys64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt' $(_InternalBuildArgs)
              displayName: Build and Publish

            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true

            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: Packages_win_x64
                artifactType: container

          ############ WINDOWS arm64 BUILD ############
          - job: Build_Windows_arm64
            displayName: Windows_arm64
            timeoutInMinutes: 480
            pool:
              name: $(DncEngInternalBuildPool)
              image: 1es-windows-2022
              os: windows
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'

            - powershell: |
                C:\msys64\usr\bin\bash -lc ' '
                C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
                C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -S msys/make msys/ninja msys/cmake msys/diffutils'
              displayName: Install MSYS2 packages (GNU Make and related)

            - script: |
                .\build.cmd -arch arm64 -restore -build -pack -ci -configuration $(_BuildConfig) -sign -publish /p:SkipWorkloads=true /p:PackageRID=win-arm64 /p:AssetManifestOS=win /p:PlatformName=arm64 /p:MsysDir=c:\msys64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt' $(_InternalBuildArgs)
              displayName: Build and Publish

            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true

            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: Packages_win_arm64
                artifactType: container

          ############ Workloads BUILD ############
          - job: Build_Workloads
            displayName: Workloads
            dependsOn:
              - Build_Windows_x64
              - Build_Windows_arm64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              demands: ImageOverride -equals windows.vs2022.amd64
              os: windows
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
                git submodule update --init
                git submodule foreach git clean -ffdx
              displayName: 'Clean up working directory and check out submodules'
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: Packages_win_x64
                path: 'artifacts/packages'
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: Packages_win_arm64
                path: 'artifacts/packages'
            - script: |
                .\build.cmd -arch x64 -restore -build -pack -ci -configuration $(_BuildConfig) -sign -publish /p:SkipBuild=true /p:AssetManifestFileName=win-workloads.xml /p:PackageRID=win-x64 /p:AssetManifestOS=win /p:PlatformName=x64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\windows\Shipping /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt' $(_InternalBuildArgs)
              displayName: Build and Publish
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: IntermediateArtifacts
                artifactType: container
            # Upload packages wrapping msis
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/windows'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/workloads'
                CleanTargetFolder: true
            # Delete wixpdb files before they are uploaded to artifacts
            - task: DeleteFiles@1
              displayName: Delete wixpdb's
              inputs:
                SourceFolder: $(Build.SourcesDirectory)/artifacts/workloadPackages
                Contents: '*.wixpdb'
            # Upload artifacts to be used for generating VS components
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish workload artifacts
              inputs:
                targetPath: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)/Insertion/
                artifactName: 'Workloads'
              continueOnError: true
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes

    ############ POST BUILD ARCADE LOGIC ############
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSourceLinkValidation: false
        enableSigningValidation: false
        enableSymbolValidation: false
        enableNugetValidation: true
